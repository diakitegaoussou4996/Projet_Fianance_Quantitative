library(panelr)
library(xlsx)
library(readxl)
library("imputeTS")
library(dplyr)
library(timeSeries)
library(fPortfolio)
library(quantmod)
library(caTools)
library(timeDate)
library(knitr)
#library(tidyquant)
library(stats)
library(reshape2)
library(gridExtra)
#library(Dowd)
Returns <- read_excel('data/Data_projet.xlsx', sheet ='Returns')
Returns_p <- read_excel('data/Data_projet.xlsx', sheet ='Returns')#data utilisé pour construire le panel
stock <- read_excel('data/Data_Projet.xlsx', sheet = "List")
#replace NA values in all numeric columns with respective medians
Returns <- Returns %>% mutate(across(where(is.numeric), ~replace_na(., median(., na.rm=TRUE))))
Returns_p <- Returns_p %>% mutate(across(where(is.numeric), ~replace_na(., median(., na.rm=TRUE))))
#Conversion en datetime
Returns$Dates <- as.Date(Returns$Dates)
Returns <- xts(Returns[,3:59], order.by=Returns$Dates)
#Data_Projet_EBITA_MARGIN <- read_excel("Data_Projet.xlsx", sheet = "EBITA_MARGIN")
#Data_Projet_EV <- read_excel("Data_Projet.xlsx", sheet = "EV")
#Data_Projet_ROIC <- read_excel("Data_Projet.xlsx", sheet = "ROIC")
#Data_Projet_WACC <- read_excel("Data_Projet.xlsx", sheet = "WACC")
#Data_Projet_ESG <- read_excel("Data_Projet.xlsx", sheet = "ESG_Score_from_Bloomberg")
stock %>%
count(INDUSTRY_SECTOR, color = INDUSTRY_SECTOR) %>%
ggplot(aes(x = INDUSTRY_SECTOR, y = n, fill = color)) +
geom_bar(stat = "identity") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle("Composition de la base de données") +
xlab("Secteur d'activités") +
ylab("Nombre")
# ______________  etape 1: Construction de données de panel ______________
test_DF = Returns_p[,2:58]
require(reshape2)
require(PerformanceAnalytics)
Custom_Melt_DataFrame = function(test_data = test_DF ,dateColumnName = c("Dates Future"), columnOfInterest1 = "equities",columnOfInterest2 = "return") {
molten_DF = melt(test_data,dateColumnName,stringsAsFactors=FALSE)
colnames(molten_DF) = c(dateColumnName,columnOfInterest1,columnOfInterest2)
molten_DF[,columnOfInterest1] = as.character(molten_DF[,columnOfInterest1])
molten_DF$index =  rep(1:(ncol(test_data)-1),each=nrow(test_data))
molten_DF = molten_DF[,c("index",columnOfInterest1,dateColumnName,columnOfInterest2)]
return(molten_DF)
}
custom_data = Custom_Melt_DataFrame(test_data = test_DF ,dateColumnName = c("Dates Future"), columnOfInterest1 ="equities",columnOfInterest2 = "return")
custom_data$`Dates Future`<-as.Date(custom_data$`Dates Future`)
class(custom_data$`Dates Future`)
custom_data$return<-as.numeric(unlist(custom_data$return))
custom_data<- pdata.frame(custom_data, index = c("index"), drop.index = TRUE)
custom_data <- panel_data(custom_data, id = equities, wave = Dates.Future)
custom_data <-na.omit(custom_data)
head(custom_data)  #Affichage de panel-data
#Test de normalité de Jarque Berra
high_cols <- c()
low_cols <- c()
result <- apply(Returns[,3:ncol(Returns)], 2, jarque.bera.test)
for(i in 1:length(result)){
if(result[[i]]$p.value > 0.05){
high_cols <- c(high_cols, colnames(Returns)[i+2])
}else{
low_cols <- c(low_cols, colnames(Returns)[i+2])
}
}
#high_cols #les titres avec une pevalue eleve
#low_cols
result  #visualisation des resultat du test
for (i in 3:ncol(Returns)){
acf_result <- acf(Returns[,i])
# Plot autocorrelation function
plot(acf_result)
}
#______________  etape2: statistique descriptive stickées dans un table  ______________
stat_descriptive = custom_data %>%
group_by(equities) %>%
summarise(Minimum = round(min(return), digits = 4),
Maximum = round(max(return), digits = 4),
Moyenne = round(mean(return), digits = 4),
Variance = round(var(return), digits = 4),
Volatilite = round(sd(return), digits = 4),
Kurtosis = round(kurtosis(return), digits = 4),
Skewness = round(skewness(return), digits = 4))
stat_descriptive
#Returns<-na.omit(Returns)
#Returns<-as.numeric(unlist(Returns))
#______________  Graphiques individuelle par equity (Histogram) ______________
range = 3:58
for (i in 1:ncol(Returns)){
chart.Histogram(
as.numeric(unlist(Returns[,i])),
breaks = "FD",
main = names(Returns)[i],
xlab = "Returns",
ylab = "Frequency",
methods =  "none",
show.outliers = TRUE,
colorset = c("#23FFDC"),
border.col = "white",
lwd = 2,
xlim = NULL,
ylim = NULL,
element.color = "darkgray",
note.lines = NULL,
note.labels = NULL,
note.cex = 0.7,
note.color = "darkgray",
probability = FALSE,
p = 0.95,
font.main=4, font.lab=4
)
}
#______________ histogramme à partir des données de panel  ______________
bins_fd <- function(vec) {
diff(range(vec)) / (2 * IQR(vec) / length(vec)^(1 / 3))
}
ggplot(data = custom_data, mapping = aes(x = return)) +
geom_histogram(
alpha = 0.5,
#mapping = aes(fill = equities),
bins = bins_fd(custom_data$return)
#bins = 50
) +
facet_wrap(. ~ equities) +
ggtitle("Distribution de Returns") +
theme(
panel.background = element_rect(fill = "grey97"),
panel.grid = element_blank(),
)
#______________  Graphiques des Returns  ______________
ts.plot(Returns, col = 3:58, xlab = "Year", ylab = "Returns", main = "Stock Indices")
legend("bottomright", colnames(Returns_p[3:58]), lty = 1, col = 3:58, bty = "c")
library(Hmisc)
M = cor(Returns_p[,3:58])
Matrice_corr <- as.data.frame(M)  #Pour visualiser les coeff de correlation, nous constrisons un data frame Matrice_corr
corrplot(M, type = "upper", order = "hclust", addrect =6,
rect.col = "black", rect.lwd = 2,cl.pos = "r", tl.col = "black", tl.cex = 0.70,
cl.cex = 1.25)
corrplot(M, method = "number", outline = T, addgrid.col = "darkgray", order="hclust", addrect = 6,
rect.col = "black", rect.lwd = 2,cl.pos = "r", tl.col = "black", tl.cex = 0.5,
cl.cex = 0.5, addCoef.col = "dark", number.digits = 2, number.cex = 0.25)
# ______________ 1. Sharp Ratio ______________
Returns_xts <- xts(x = Returns_p[, 3:59],
order.by = as.Date(Returns_p$Dates))
Index_time_series <- ts(Returns_p[,59], start = c(2017, 08), frequency = 12)
ratios_1 = Returns_p %>%
summarise(sharp = round(SharpeRatio(ts(Returns_p[,3:58],start = c(2017, 08), frequency = 12), Rf=0.036, p=0.95, FUN="StdDev"), digits =4))
ratios_1 <- as.data.frame(ratios_1)
ratios_2 <- t(ratios_1)
#ratios_2
ratios_2[ratios_2[,1] <0,]
ratios_VaR <- lapply(3:58, function(i) round(quantile(ts(Returns_p[,i],start = c(2017, 08), frequency = 12), probs = 0.05), digits = 4))
#ratios_VaR
my_df <- bind_rows(ratios_VaR)
colnames(my_df) <- c("VaR_hist")
result_df <- data.frame(matrix(ncol = 1, nrow = 0))
colnames(result_df) <- c("Treynor_Ratio")
for (i in 4:ncol(Returns_p)-1){
Returns_p=na.omit(Returns_p)
portfolio_returns <- ts(Returns_p[,i])
# Definir le benchmark returns
benchmark_returns <- ts(Returns_p[,59])
# Calculer portfolio beta
portfolio_beta <- (cov(portfolio_returns,benchmark_returns)/var(benchmark_returns))
# Calculer portfolio excess returns
portfolio_excess_returns <- portfolio_returns - benchmark_returns
# Calculer Treynor Ratio
treynor_ratio <- mean(portfolio_excess_returns) / portfolio_beta
# creer le data frame à partir des resultats
result_df <- rbind(result_df, data.frame(Treynor_Ratio = treynor_ratio))
}
treynor <- result_df
treynor_vector <- treynor$S5ENRS.Index
barplot(treynor_vector, ylab = "Treynor Ratio")
#une autre facon de calculer sortino ratio
for (i in 4:ncol(Returns_p)-1){
downside_deviation <- SortinoRatio(ts(Returns_p[,i]))
# Calculate the Sortino Ratio
sortino_ratio <- mean(ts(Returns_p[,i])) / downside_deviation
# Print the Sortino Ratio
#print(sortino_ratio)
}
sortino_ratio <- function(series,rf) {
mean <- mean(series) -rf
std_neg <- sd(series[series < 0])
return(mean/std_neg)
}
sortinos <- apply(Returns_p[3:58], 2, sortino_ratio, rf=0.036)
barplot(sortinos, ylab = "Sortino Ratio")
max_drawdown <- function(return_series) {
comp_ret <- cumprod(return_series + 1)
peak <- cummax(comp_ret)
dd <- (comp_ret/peak)-1
return(min(dd))
}
max_drawdowns <- apply(ts(Returns_p[3:58]), 2, max_drawdown)
barplot(max_drawdowns, ylab = "Max Drawdown" )
calmars <- colMeans(ts(Returns_p[3:58]))/abs(max_drawdowns)
barplot(calmars, ylab = "Calmar ratio")
sharpe_ratio <- function(return_series, rf) {
mean <- mean(return_series) -rf
sigma <- sd(return_series)
return(mean / sigma)
}
sharpes <- apply(ts(Returns_p[3:58]), 2, sharpe_ratio, rf=0.036)
barplot(sharpes)
btstats <- data.frame(Sharpe_ratio=sharpes,Treynor_ratio= treynor_vector, Calmar_ratio = calmars, Sortino_ratio =sortinos, var = my_df, Max_drawdowns = max_drawdowns)
btstats
library(readxl)
library(ggplot2)
library(dplyr)
library(timeDate)
library(timeSeries)
library(fPortfolio)
library(timeDate)
library(PerformanceAnalytics)
library(PortfolioAnalytics)
install. packages("PortfolioAnalytics")
install.packages("PortfolioAnalytics")
library(readxl)
library(ggplot2)
library(dplyr)
library(timeDate)
library(timeSeries)
library(fPortfolio)
library(timeDate)
library(PerformanceAnalytics)
library(PortfolioAnalytics)
#install.packages("PortfolioAnalytics")
library(readxl)
library(ggplot2)
library(dplyr)
library(timeDate)
library(timeSeries)
library(fPortfolio)
library(timeDate)
library(PerformanceAnalytics)
library(PortfolioAnalytics)
setwd()
setpwd()
Returns <- read.csv('data/Returns_clean.csv', sep = ",", header = T)
#Je renomme la date
colnames(Returns)[colnames(Returns)=="Date_2"] <- "Date"
# Je supprime le rendement SP500 dans la nbase de données rendement
Returns[c('S5ENRS')] <- list(NULL)
#install.packages("PortfolioAnalytics")
library(readxl)
library(ggplot2)
library(dplyr)
library(timeDate)
library(timeSeries)
library(fPortfolio)
library(timeDate)
library(PerformanceAnalytics)
library(PortfolioAnalytics)
Returns <- read.csv('data/Returns_clean.csv', sep = ",", header = T)
#Je renomme la date
colnames(Returns)[colnames(Returns)=="Date_2"] <- "Date"
# Je supprime le rendement SP500 dans la nbase de données rendement
Returns[c('S5ENRS')] <- list(NULL)
Returns$Date <- as.Date(Returns$Date, format="%Y-%m-%d")
fontir_effi_return <- as.timeSeries(Returns)
pspec <- portfolioSpec()
front_eff <- portfolioFrontier(fontir_effi_return, constraints = "LongOnly")
plot(front_eff, c(1, 4), main="Frontière d'efficacité du portefeuille", xlab="Risque", ylab="Rendement")
# 1 : fronti?re efficiente
# 4 : les actifs individuels
port <- portfolio.spec(assets = c(colnames(fontir_effi_return)))
port <- add.constraint(portfolio = port, type = "long_only")
port_rnd <- add.objective(portfolio = port, type = "risk", name = "StdDev")
port_rnd <- add.objective(portfolio = port_rnd, type = "return", name = "mean")
rand_p <- optimize.portfolio(R = fontir_effi_return, portfolio = port_rnd, optimize_method = "random",
trace = TRUE, search_size = 1000)
#par(mar = c(5, 5, 4, 5) + 0.1, mgp = c(3, 1, 0), cex = 1.5)
chart.RiskReward(rand_p, risk.col = "StdDev", return.col = "mean", chart.assets = TRUE)
eff_front <- portfolioFrontier(fontir_effi_return, constraints = "LongOnly")
plot(eff_front, c(1, 2, 3, 4,5,6))
eff_front <- portfolioFrontier(fontir_effi_return, constraints = "LongOnly")
plot(eff_front, c(1, 2, 3, 4,5,6))
eff_front <- portfolioFrontier(fontir_effi_return, constraints = "LongOnly")
plot(eff_front, c(1, 2, 3, 4, 5,6,7))
tailoredFrontierPlot(eff_front, sharpeRatio = FALSE, risk = "Sigma")
weightsPlot(eff_front)
eff_front <- portfolioFrontier(fontir_effi_return, constraints = "LongOnly")
plot(eff_front, c(1, 2))
minvar_ptf <- minvariancePortfolio(fontir_effi_return,  spec = portfolioSpec())
summary(minvar_ptf)
eff_front = portfolioFrontier(fontir_effi_return, constraints = "LongOnly")
plot(eff_front, c(1, 5)) # portefeuille équipondéré
stock_return <- xts(x = subset(Returns, select = -c(Date)), order.by = as.Date(Returns$Date))
stock_return <- na.omit(stock_return)
w = 1/57
stock_weight = c(w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w)
ewp_ptf = Return.portfolio(stock_return, weights = stock_weight)
stat_desc <- function(return, rf){
stats <- Return.cumulative(return)
stats <- rbind(stats, StdDev(return))
stats <- rbind(stats, SharpeRatio(return, Rf = rf, FUN = "StdDev"))
rownames(stats) <- c("Rendement cumul?", "Volatilit?", "Ratio de Sharpe")
stats <- t(stats)
return(stats)
}
results_Q7 <- stat_desc(ewp_ptf, rf = 0)
#install.packages("PortfolioAnalytics")
library(readxl)
library(ggplot2)
library(dplyr)
library(timeDate)
library(timeSeries)
library(fPortfolio)
library(timeDate)
library(PerformanceAnalytics)
library(PortfolioAnalytics)
Returns <- read.csv('data/Returns_clean.csv', sep = ",", header = T)
#Je renomme la date
colnames(Returns)[colnames(Returns)=="Date_2"] <- "Date"
# Je supprime le rendement SP500 dans la nbase de données rendement
Returns[c('S5ENRS')] <- list(NULL)
View(Returns)
View(Returns)
Returns <- read.csv('data/Returns_clean_1.csv', sep = ",", header = T)
#Je renomme la date
colnames(Returns)[colnames(Returns)=="Date_2"] <- "Date"
# Je supprime le rendement SP500 dans la nbase de données rendement
Returns[c('S5ENRS')] <- list(NULL)
#install.packages("PortfolioAnalytics")
library(readxl)
library(ggplot2)
library(dplyr)
library(timeDate)
library(timeSeries)
library(fPortfolio)
library(timeDate)
library(PerformanceAnalytics)
library(PortfolioAnalytics)
Returns <- read.csv('data/Returns_clean_1.csv', sep = ",", header = T)
#Je renomme la date
colnames(Returns)[colnames(Returns)=="Date_2"] <- "Date"
# Je supprime le rendement SP500 dans la nbase de données rendement
Returns[c('S5ENRS')] <- list(NULL)
Returns$Date <- as.Date(Returns$Date, format="%Y-%m-%d")
fontir_effi_return <- as.timeSeries(Returns)
pspec <- portfolioSpec()
front_eff <- portfolioFrontier(fontir_effi_return, constraints = "LongOnly")
plot(front_eff, c(1, 4), main="Frontière d'efficacité du portefeuille", xlab="Risque", ylab="Rendement")
# 1 : fronti?re efficiente
# 4 : les actifs individuels
port <- portfolio.spec(assets = c(colnames(fontir_effi_return)))
port <- add.constraint(portfolio = port, type = "long_only")
port_rnd <- add.objective(portfolio = port, type = "risk", name = "StdDev")
port_rnd <- add.objective(portfolio = port_rnd, type = "return", name = "mean")
rand_p <- optimize.portfolio(R = fontir_effi_return, portfolio = port_rnd, optimize_method = "random",
trace = TRUE, search_size = 1000)
#par(mar = c(5, 5, 4, 5) + 0.1, mgp = c(3, 1, 0), cex = 1.5)
chart.RiskReward(rand_p, risk.col = "StdDev", return.col = "mean", chart.assets = TRUE)
eff_front <- portfolioFrontier(fontir_effi_return, constraints = "LongOnly")
plot(eff_front, c(1, 2, 3, 4,5,6))
w = 1/57
stock_weight = c(w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w)
ewp_ptf = Return.portfolio(stock_return, weights = stock_weight)
stock_return <- xts(x = subset(Returns, select = -c(Date)), order.by = as.Date(Returns$Date))
stock_return <- na.omit(stock_return)
w = 1/57
stock_weight = c(w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w)
ewp_ptf = Return.portfolio(stock_return, weights = stock_weight)
View(stock_return)
View(stock_return)
library(readxl)
library(ggplot2)
library(dplyr)
library(timeDate)
library(timeSeries)
library(fPortfolio)
library(timeDate)
library(PerformanceAnalytics)
library(PortfolioAnalytics)
Returns <- read.csv("data/Returns_partie3.csv", sep = ",", header = T)
#Je renomme la date
colnames(Returns)[colnames(Returns)=="Date_2"] <- "Date"
# Je supprime le rendement SP500 dans la nbase de données rendement
Returns[c('S5ENRS')] <- list(NULL)
Returns$Date <- as.Date(Returns$Date, format="%Y-%m-%d")
fontir_effi_return <- as.timeSeries(Returns)
pspec <- portfolioSpec()
front_eff <- portfolioFrontier(fontir_effi_return, constraints = "LongOnly")
plot(front_eff, c(1, 4), main="Frontière d'efficacité du portefeuille", xlab="Risque", ylab="Rendement")
# 1 : fronti?re efficiente
# 4 : les actifs individuels
port <- portfolio.spec(assets = c(colnames(fontir_effi_return)))
port <- add.constraint(portfolio = port, type = "long_only")
port_rnd <- add.objective(portfolio = port, type = "risk", name = "StdDev")
port_rnd <- add.objective(portfolio = port_rnd, type = "return", name = "mean")
rand_p <- optimize.portfolio(R = fontir_effi_return, portfolio = port_rnd, optimize_method = "random",
trace = TRUE, search_size = 1000)
#par(mar = c(5, 5, 4, 5) + 0.1, mgp = c(3, 1, 0), cex = 1.5)
chart.RiskReward(rand_p, risk.col = "StdDev", return.col = "mean", chart.assets = TRUE)
eff_front <- portfolioFrontier(fontir_effi_return, constraints = "LongOnly")
plot(eff_front, c(1, 2, 3, 4,5,6))
eff_front <- portfolioFrontier(fontir_effi_return, constraints = "LongOnly")
plot(eff_front, c(1, 2, 3, 4, 5,6,7))
tailoredFrontierPlot(eff_front, sharpeRatio = FALSE, risk = "Sigma")
weightsPlot(eff_front)
eff_front <- portfolioFrontier(fontir_effi_return, constraints = "LongOnly")
plot(eff_front, c(1, 2))
minvar_ptf <- minvariancePortfolio(fontir_effi_return,  spec = portfolioSpec())
summary(minvar_ptf)
eff_front = portfolioFrontier(fontir_effi_return, constraints = "LongOnly")
plot(eff_front, c(1, 5)) # portefeuille équipondéré
stock_return <- xts(x = subset(Returns, select = -c(Date)), order.by = as.Date(Returns$Date))
stock_return <- na.omit(stock_return)
w = 1/57
stock_weight = c(w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w,w)
ewp_ptf = Return.portfolio(stock_return, weights = stock_weight)
stat_desc <- function(return, rf){
stats <- Return.cumulative(return)
stats <- rbind(stats, StdDev(return))
stats <- rbind(stats, SharpeRatio(return, Rf = rf, FUN = "StdDev"))
rownames(stats) <- c("Rendement cumul?", "Volatilit?", "Ratio de Sharpe")
stats <- t(stats)
return(stats)
}
results_Q7 <- stat_desc(ewp_ptf, rf = 0.036)
results_Q7
install.packages("tinytex")
tinytex::install_tinytex()
library(tseries)
library(Matrix)
library(corrplot)
library(RColorBrewer)
library(tidyquant)
library(PerformanceAnalytics)
library(devtools)
library(tidyverse)
library(psych)
library("FactoMineR")
library("factoextra")
library(moments)
library(ggplot2)
library(zoo)
library("plm")
library(tidyverse)
library(xts)
library(panelr)
library(xlsx)
library(readxl)
library("imputeTS")
library(dplyr)
library(timeSeries)
library(fPortfolio)
library(quantmod)
library(caTools)
library(timeDate)
library(knitr)
#library(tidyquant)
library(stats)
library(reshape2)
library(gridExtra)
#library(Dowd)
eff_front <- portfolioFrontier(fontir_effi_return, constraints = "LongOnly")
Returns <- read.csv("data/Returns_partie3.csv", sep = ",", header = T)
#Je renomme la date
colnames(Returns)[colnames(Returns)=="Date_2"] <- "Date"
# Je supprime le rendement SP500 dans la nbase de données rendement
Returns[c('S5ENRS')] <- list(NULL)
Returns$Date <- as.Date(Returns$Date, format="%Y-%m-%d")
fontir_effi_return <- as.timeSeries(Returns)
pspec <- portfolioSpec()
front_eff <- portfolioFrontier(fontir_effi_return, constraints = "LongOnly")
plot(front_eff, c(1, 4), main="Frontière d'efficacité du portefeuille", xlab="Risque", ylab="Rendement")
# 1 : fronti?re efficiente
# 4 : les actifs individuels
port <- portfolio.spec(assets = c(colnames(fontir_effi_return)))
library(readxl)
library(ggplot2)
library(dplyr)
library(timeDate)
library(timeSeries)
library(fPortfolio)
library(timeDate)
library(PerformanceAnalytics)
library(PortfolioAnalytics)
Returns <- read.csv("data/Returns_partie3.csv", sep = ",", header = T)
#Je renomme la date
colnames(Returns)[colnames(Returns)=="Date_2"] <- "Date"
# Je supprime le rendement SP500 dans la nbase de données rendement
Returns[c('S5ENRS')] <- list(NULL)
Returns$Date <- as.Date(Returns$Date, format="%Y-%m-%d")
fontir_effi_return <- as.timeSeries(Returns)
pspec <- portfolioSpec()
front_eff <- portfolioFrontier(fontir_effi_return, constraints = "LongOnly")
plot(front_eff, c(1, 4), main="Frontière d'efficacité du portefeuille", xlab="Risque", ylab="Rendement")
# 1 : fronti?re efficiente
# 4 : les actifs individuels
port <- portfolio.spec(assets = c(colnames(fontir_effi_return)))
port <- add.constraint(portfolio = port, type = "long_only")
port_rnd <- add.objective(portfolio = port, type = "risk", name = "StdDev")
port_rnd <- add.objective(portfolio = port_rnd, type = "return", name = "mean")
rand_p <- optimize.portfolio(R = fontir_effi_return, portfolio = port_rnd, optimize_method = "random",
trace = TRUE, search_size = 1000)
#par(mar = c(5, 5, 4, 5) + 0.1, mgp = c(3, 1, 0), cex = 1.5)
chart.RiskReward(rand_p, risk.col = "StdDev", return.col = "mean", chart.assets = TRUE)
eff_front <- portfolioFrontier(fontir_effi_return, constraints = "LongOnly")
plot(eff_front, c(1, 2, 3, 4,5,6))
eff_front <- portfolioFrontier(fontir_effi_return, constraints = "LongOnly")
plot(eff_front, c(1, 2, 3, 4,5))
eff_front <- portfolioFrontier(fontir_effi_return, constraints = "LongOnly")
plot(eff_front, c(1, 2, 3, 4,5))
